pipeline {
    agent {
        label 'jenkins-agent'
    }
    environment {
        PIPELINE_HASH = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
        HARBOR_REGISTRY = 'harbor.dev.afsmtddso.com'
        HARBOR_PROJECT = 'ktorres-devsecops' 
        APP_IMAGE_NAME = 'app'
        DB_IMAGE_NAME = 'db' 
    }
    stages {
        stage('Application repository') {
            steps {
                echo "Cloning application repository"
                sh 'git clone https://github.com/ktorres2017/afs-labs-student.git'
                dir('afs-labs-student') {
                    script{
                       env.DB_HASH = sh(script: 'git log --format=format:%h -1 --follow database/database.sql', returnStdout: true).trim()
                       withCredentials([usernamePassword(credentialsId: 'ktorres-harbor-auth', usernameVariable: 'student19', passwordVariable: 'Student668!')]) {
                    script {
                        env.BUILD_DB = sh(script: 'python check_harbor_db.py -h $DB_HASH -i $DB_IMAGE_NAME -r $HARBOR_REGISTRY -p $HARBOR_PROJECT -c ${USERNAME}:${PASSWORD}', returnStdout: true).trim()
                    }
                }

                    }
                }
             }
        }
        stage('DB changes: true') {
            when {
                environment name: 'BUILD_DB', value: 'true'
            }
            stages {
                stage('Database docker build') {
                    steps {
                        // modify to build docker image and push to Harbor
                    }
                    post {
                        // modify to clean local image in docker
                    }
                }
                stage('Security scanning') {
                    steps {
                        // modify to scan database image
                        echo "Security scanning..."
                    }
                }
                stage('Deploy') {
                    steps {
                        // modify to deploy database
                    }
                }
            }
        }

    }
              post {
                always {
                    echo "Clean local $APP_IMAGE_NAME image"
                    cleanup {
                      echo "Clean workspace"
                      sh 'docker system prune -f'
                      sh 'rm -rf .git ./*'
                     }
                  }
             }
